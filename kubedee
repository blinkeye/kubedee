#!/bin/bash

[[ -n "${KUBEDEE_DEBUG}" ]] && set -x
set -euo pipefail

bash_source="${BASH_SOURCE[0]}"
while [[ -L "${bash_source}" ]]; do
  bash_dir="$(cd -P "$(dirname "${bash_source}")" && pwd)"
  bash_source="$(readlink "${bash_source}")"
  [[ "${bash_source}" != /* ]] && bash_source="${bash_dir}/${bash_source}"
done
readonly kubedee_source_dir="$(cd -P "$(dirname "${bash_source}")" && pwd)"

# TODO(schu): check requirements
# TODO(schu): source user config if available

bin_dir="./_output/bin"
num_worker=2

readonly kubedee_version="$(
  cd "${kubedee_source_dir}"
  git describe --tags --always --dirty
)"

readonly kubedee_dir="${HOME}/.local/share/kubedee"
mkdir -p "${kubedee_dir}"

# shellcheck source=/dev/null
source "${kubedee_source_dir}/lib.bash"

if [[ $EUID -eq 0 ]]; then
  kubedee::exit_error "kubedee is not meant to be run as root"
fi

exit_usage() {
  cat >&2 <<USAGE
kubedee - ${kubedee_version}
Usage:
  kubedee [options] create <cluster name>         create a cluster
  kubedee [options] delete <cluster name>         delete a cluster
  kubedee [options] etcd-env <cluster name>       print etcdctl environment variables
  kubedee [options] kubectl-env <cluster name>    print kubectl environment variables
  kubedee [options] list                          list all clusters
  kubedee [options] smoke-test <cluster name>     smoke test a cluster
  kubedee [options] start <cluster name>          start a new cluster
  kubedee [options] start-worker <cluster name>   start a new worker node in a cluster
  kubedee [options] up <cluster name>             create + start in one command
  kubedee [options] version                       print kubedee version and exit

Options:
  --bin-dir <dir>      where to copy the k8s binaries from (default: ./_output/bin)
  --num-worker <num>   number of worker nodes to start (default: 2)
USAGE
  exit 1
}

cmd_create() {
  local cluster_name
  cluster_name="$(kubedee::validate_name "${1}")"
  [[ -d "${kubedee_dir}/clusters/${cluster_name}" ]] && kubedee::exit_error "Found existing cluster with name: ${cluster_name}"
  kubedee::create_network "${cluster_name}"
  kubedee::create_storage_pool
  kubedee::prune_old_caches "${cluster_name}"
  kubedee::prepare_worker_image "${cluster_name}"
  kubedee::log_info "Create new cluster ${cluster_name} ..."
  kubedee::copy_k8s_binaries "${cluster_name}" "${bin_dir}"
  kubedee::copy_etcd_binaries "${cluster_name}"
  kubedee::copy_crio_files "${cluster_name}"
  kubedee::copy_runc_binaries "${cluster_name}"
  kubedee::copy_cni_plugins "${cluster_name}"
  kubedee::create_certificate_authority "${cluster_name}"
  kubedee::create_certificate_admin "${cluster_name}"
}

cmd_delete() {
  local cluster_name
  cluster_name="$(kubedee::validate_name "${1}")"
  kubedee::log_info "Delete cluster ${cluster_name} ..."
  for c in $(lxc list --format json | jq -r '.[].name'); do
    [[ "${c}" == "kubedee-${cluster_name}-"* ]] || continue # not part of this cluster
    lxc delete -f "${c}"
  done
  kubedee::delete_network "${cluster_name}"
  rm -rf "${kubedee_dir}/clusters/${cluster_name}"
}

cmd_start() {
  local cluster_name
  cluster_name="$(kubedee::validate_name "${1}")"
  [[ -d "${kubedee_dir}/clusters/${cluster_name}" ]] || kubedee::exit_error "Found no cluster with name: ${cluster_name} - did you create it?"
  declare -A worker_suffixes
  for ((i = 0; i < num_worker; i++)); do
    worker_suffixes[${i}]="$(tr -cd 'a-z0-9' </dev/urandom | head -c 6 || true)"
  done
  kubedee::log_info "Start cluster ${cluster_name} ..."
  kubedee::launch_etcd "${cluster_name}"
  kubedee::launch_container "${cluster_name}" "kubedee-${cluster_name}-controller"
  for ((i = 0; i < num_worker; i++)); do
    kubedee::launch_container "${cluster_name}" "kubedee-${cluster_name}-worker-${worker_suffixes[${i}]}"
  done
  kubedee::configure_etcd "${cluster_name}"
  kubedee::configure_controller "${cluster_name}" "kubedee-${cluster_name}-controller"
  for ((i = 0; i < num_worker; i++)); do
    kubedee::configure_worker "${cluster_name}" "kubedee-${cluster_name}-worker-${worker_suffixes[${i}]}"
  done
  kubedee::create_kubeconfig_admin "${cluster_name}"
  kubedee::configure_rbac "${cluster_name}"
  kubedee::deploy_flannel "${cluster_name}"
  kubedee::log_success "\nCluster ${cluster_name} started"
  kubedee::log_success "Run the following command to use kubectl with the new cluster:"
  kubedee::log_success "\n\texport KUBECONFIG=${kubedee_dir}/clusters/${cluster_name}/kubeconfig/admin.kubeconfig\n"
  kubedee::log_info "Cluster nodes can be accessed with 'lxc exec <name> bash'"
  kubedee::log_info "Cluster files can be found in '${kubedee_dir}/clusters/${cluster_name}'\n"
  kubedee::log_info "Current component status is (should be healthy):"
  kubectl --kubeconfig "${kubedee_dir}/clusters/${cluster_name}/kubeconfig/admin.kubeconfig" get cs
  echo
  kubedee::log_info "Current node status is (should be ready soon):"
  kubectl --kubeconfig "${kubedee_dir}/clusters/${cluster_name}/kubeconfig/admin.kubeconfig" get nodes
  echo
}

cmd_start-worker() {
  local cluster_name
  cluster_name="$(kubedee::validate_name "${1}")"
  [[ -d "${kubedee_dir}/clusters/${cluster_name}" ]] || kubedee::exit_error "Found no cluster with name: ${cluster_name} - did you create it?"
  local name_suffix
  name_suffix="$(tr -cd 'a-z0-9' </dev/urandom | head -c 6)" || true
  kubedee::launch_worker "${cluster_name}" "${name_suffix}"
  kubedee::configure_worker "${cluster_name}" "${name_suffix}"
  kubedee::log_info "Node ${cluster_name}-${name_suffix} started"
}

cmd_list() {
  mkdir -p "${kubedee_dir}/clusters/"
  find "${kubedee_dir}/clusters/" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;
}

cmd_kubectl-env() {
  local cluster_name
  cluster_name="$(kubedee::validate_name "${1}")"
  cat <<EOF
export KUBECONFIG=${kubedee_dir}/clusters/${cluster_name}/kubeconfig/admin.kubeconfig
EOF
}

cmd_etcd-env() {
  local cluster_name
  cluster_name="$(kubedee::validate_name "${1}")"
  local container_name="kubedee-${cluster_name}-etcd"
  local etcd_ip
  etcd_ip="$(kubedee::container_ipv4_address "${container_name}")"
  cat <<EOF
export ETCDCTL_CACERT=${kubedee_dir}/clusters/${cluster_name}/certificates/ca.pem
export ETCDCTL_CERT=${kubedee_dir}/clusters/${cluster_name}/certificates/etcd.pem
export ETCDCTL_KEY=${kubedee_dir}/clusters/${cluster_name}/certificates/etcd-key.pem
export ETCDCTL_INSECURE_TRANSPORT=false
export ETCDCTL_ENDPOINTS=https://${etcd_ip}:2379
export ETCDCTL_API=3
EOF
}

cmd_smoke-test() {
  local cluster_name
  cluster_name="$(kubedee::validate_name "${1}")"
  kubedee::smoke_test "${cluster_name}"
}

cmd_version() {
  echo "${kubedee_version}"
}

main() {
  local args=()
  while [[ $# -gt 0 ]]; do
    case "${1}" in
      --bin-dir)
        bin_dir="${2}"
        shift
        shift
        ;;
      --num-worker)
        num_worker="${2}"
        shift
        shift
        ;;
      *)
        args+=("${1}")
        shift
        ;;
    esac
  done
  # Bash 4.3.48(1)-release does see `${args[@]}` as unbound,
  # 4.4.12(1)-release does not. Disable `nounset` temporarily.
  set +u
  set -- "${args[@]}"
  set -u
  local cmd="${1:-list}"
  shift || true
  case "${cmd}" in
    create | delete | etcd-env | kubectl-env | list | smoke-test | start | start-worker | version)
      "cmd_${cmd}" "$@"
      ;;
    up)
      cmd_create "$@"
      cmd_start "$@"
      ;;
    *)
      exit_usage
      ;;
  esac
}

main "$@"
