#!/bin/bash

set -euo pipefail
set -x

bash_source="${BASH_SOURCE[0]}"
while [[ -L "${bash_source}" ]]; do
  bash_dir="$(cd -P "$(dirname "${bash_source}")" && pwd)"
  bash_source="$(readlink "${bash_source}")"
  [[ "${bash_source}" != /* ]] && bash_source="${bash_dir}/${bash_source}"
done
readonly dir="$(cd -P "$(dirname "${bash_source}")" && pwd)"

readonly tmp_dir="$(mktemp -d "/tmp/kubedee-test-XXXXXX")"
cleanup() {
  lxc list --format csv --columns n |
    grep ^kubedee-smoke-test | xargs -r lxc delete -f
  rm -rf "${tmp_dir}"
}
trap cleanup EXIT

if [[ $# -gt 0 ]]; then
  readonly k8s_versions=("$@")
else
  readonly k8s_versions=("v1.9.10" "v1.10.7" "v1.11.2" "v1.12.0-beta.0")
fi

readonly kubedee_dir="${tmp_dir}/kubedee"
mkdir -p "${kubedee_dir}"
readonly k8s_binaries="${tmp_dir}/k8s-binaries"
mkdir -p "${k8s_binaries}"

kdee() {
  kubedee --no-set-context --dir "${kubedee_dir}" "$@"
}

for v in "${k8s_versions[@]}"; do
  bin_dir="${k8s_binaries}/${v}"
  "${dir}/download-k8s-binaries" "${v}" "${bin_dir}"
  cluster_name="smoke-test-${v}"
  kdee up --bin-dir "${bin_dir}/kubernetes/server/bin" "${cluster_name}"
  kdee smoke-test "${cluster_name}"
  kdee delete "${cluster_name}"
done
